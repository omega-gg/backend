# VBML 1.0.1
#--------------------------------------------------------------------------------------------------
# Properties
#--------------------------------------------------------------------------------------------------

type: backend

source: https://raw.githubusercontent.com/omega-gg/backend/master/youtube.vbml

api: 1.0.1

version: 1.0.58

title: Youtube

host: youtube.com

cover: cover/youtube.png

items:
    playlist:
        title: Tracks
    folder:
        title: Channels
    folder:
        title: Playlists

validate: ^youtube.com|^youtu.be

#--------------------------------------------------------------------------------------------------
# Routines
#--------------------------------------------------------------------------------------------------

TRACK_ID: |
    SET url (URL_REMOVE_PREFIX url)
    IF (START_WITH url "youtu.be")
        RETURN (URL_ELEMENT url 9)
    ELIF (EQUAL (START_WITH url "youtube.com") false)
        RETURN
    FI
    SET index (INDEX_END url (REGEXP "\\?v=|&v=|/v/|/embed/"))
    IF (NOT_EQUAL index -1)
        RETURN (URL_ELEMENT url index)
    FI

PLAYLIST_INFO: |
    SET url (URL_REMOVE_PREFIX url)
    IF (EQUAL (START_WITH url "youtube.com") false)
        RETURN false
    FI
    SET index (INDEX_OF url (REGEXP "/user/|/channel/|/c/"))
    IF (EQUAL index -1)
        SET index (INDEX_END url (REGEXP "\\?p=|&p=|\\?list=|&list="))
        IF (EQUAL index -1)
            SET index (INDEX_END (REGEXP "\\?channel_id=|&channel_id="))
            IF (EQUAL index -1)
                SET string (URL_ELEMENT url 12)
                IF (GREATER (LENGTH string) 3) # We want to avoid the 'new' page.
                AND (EQUAL (INDEX_OF url (REGEXP "[/\\?#]") 12) -1)
                    # NOTE: We make it a feed by default.
                    SET type "feed"
                    SET id string
                ELSE
                    RETURN false
                FI
            ELSE
                SET type "feed"
                SET id (APPEND "channel/" (URL_ELEMENT url index))
            FI
            RETURN true
        FI
        SET type "playlist"
        SET id (URL_ELEMENT url index)
    ELSE
        SET type "feed"
        SET id (URL_ELEMENT url 2 (ADD index 1))
    FI
    RETURN true

URL_TRACK: |
    RETURN (APPEND "https://www.youtube.com/watch?v=" id)

URL_PLAYLIST: |
    IF (EQUAL type "feed")
        RETURN (APPEND "https://www.youtube.com/" id)
    ELSE
        RETURN (APPEND "https://www.youtube.com/playlist?list=" id)
    FI

QUERY_SOURCE: |
    SET url (URL_REMOVE_PREFIX url)
    IF (START_WITH url "youtu.be")
        SET id (URL_ELEMENT url 9)
    ELIF (START_WITH url "youtube.com")
        SET index (INDEX_END url (REGEXP "\\?v=|&v=|/v/|/embed/"))
        IF (EQUAL index -1)
            RETURN false
        FI
        SET id (URL_ELEMENT url index)
    ELSE
        RETURN false
    FI
    SET url \
        "https://www.youtube.com/youtubei/v1/player?key=AIzaSyA8eiZmM1FaDVjRy-df2KTyQ_vz_yYM39w&prettyPrint=false"
    SET header '"Content-Type" "application/json"'
    SET body (APPEND '{ "context": { "client": { "clientName": "ANDROID", "clientVersion": '     \
                     '"17.31.35", "androidSdkVersion": 30, "userAgent": '                        \
                     '"com.google.android.youtube/17.31.35 (Linux; U; Android 11) gzip", "hl": ' \
                     '"en", "timeZone": "UTC", "utcOffsetMinutes": 0}}, "videoId": "' id         \
                     '", "params": "CgIQBg==", "playbackContext": { "contentPlaybackContext": '  \
                     '{ "html5Preference": "HTML5_PREF_WANTS" }}, "contentCheckOk": true, '      \
                     '"racyCheckOk": true }')
    RETURN true

QUERY_TRACK: |
    SET url (URL_REMOVE_PREFIX url)
    IF (START_WITH url "youtu.be")
        SET string (URL_ELEMENT url 9)
    ELIF (START_WITH url "youtube.com")
        SET index (INDEX_END url (REGEXP "\\?v=|&v=|/v/|/embed/"))
        IF (EQUAL index -1)
            RETURN false
        FI
        SET string (URL_ELEMENT url index)
    ELSE
        RETURN false
    FI
    SET url (APPEND "https://www.youtube.com/watch?v=" string "&ucbcb=1")
    RETURN true

QUERY_PLAYLIST: |
    SET url (URL_REMOVE_PREFIX url)
    IF (EQUAL (START_WITH url "youtube.com") false)
        RETURN false
    FI
    SET index (INDEX_OF url (REGEXP "/user/|/channel/|/c/"))
    IF (EQUAL index -1)
        SET index (INDEX_END url (REGEXP "\\?p=|&p=|\\?list=|&list="))
        IF (EQUAL index -1)
            SET index (INDEX_END url (REGEXP "\\?channel_id=|&channel_id="))
            IF (EQUAL index -1)
                SET string (URL_ELEMENT url 12)
                IF (GREATER (LENGTH string) 3) # We want to avoid the 'new' page.
                AND (EQUAL (INDEX_OF url (REGEXP "[/\\?#]") 12) -1)
                    # NOTE: We make it a feed by default.
                    SET url (APPEND "https://www.youtube.com/" string "/videos?view=0&ucbcb=1")
                    SET id 1
                ELSE
                    SET url ""
                    RETURN false
                FI
            ELSE
                SET string (APPEND "channel/" (URL_ELEMENT url index))
                SET url (APPEND "https://www.youtube.com/" string "/videos?view=0&ucbcb=1")
                SET id 1
            FI
        ELSE
            SET string (URL_ELEMENT url index)
            SET url (APPEND "https://www.youtube.com/playlist?list=" string "&ucbcb=1")
        FI
    ELSE
        SET string (URL_ELEMENT url 2 (ADD index 1))
        SET url (APPEND "https://www.youtube.com/" string "/videos?view=0&ucbcb=1")
        SET id 1
    FI
    RETURN true

CREATE_QUERY: |
    IF (EQUAL method "search")
        IF (EQUAL label "tracks")
            SET url "https://www.youtube.com/results"
            URL_ADD_QUERY url "search_query" (URL_ENCODE q)
            URL_ADD_QUERY url "sp" "EgIQAQ%253D%253D"
            URL_ADD_QUERY url "ucbcb" "1"
            SET id 2
        ELIF (EQUAL label "channels")
            SET url "https://www.youtube.com/results"
            URL_ADD_QUERY url "search_query" (URL_ENCODE q)
            URL_ADD_QUERY url "sp" "EgIQAg%253D%253D"
            URL_ADD_QUERY url "ucbcb" "1"
            SET id 1
        ELIF (EQUAL label "playlists")
            SET url "https://www.youtube.com/results"
            URL_ADD_QUERY url "search_query" (URL_ENCODE q)
            URL_ADD_QUERY url "sp" "EgIQAw%253D%253D"
            URL_ADD_QUERY url "ucbcb" "1"
        FI
    ELIF (EQUAL method "related")
    AND (EQUAL label "tracks")
        SET url (APPEND "https://www.youtube.com/watch?v=" q "&ucbcb=1")
        SET id 3
    FI

EXTRACT_SOURCE: |
    SET data (READ data "utf-8")
    IF (EQUAL id 1) # Live
        SET list (SLICES data "EXT-X-STREAM-INF" "m3u8")
        FOREACH list value
            SET quality (SLICE_IN value 'x' ',')
            SET source (MID value (INDEX_OF value 'https'))
            HASH_SET medias quality source
        END
    ELSE
        #------------------------------------------------------------------------------------------
        # Load "formats"
        #------------------------------------------------------------------------------------------
        # NOTE: When the source mode is 'SourceAudio' we skip the video sources.
        IF (NOT_EQUAL mode "audio")
            SET sources (SLICE_IN data '"formats"' ']')
            SET list (SPLIT sources "approxDurationMs")
            FOREACH list value
                #----------------------------------------------------------------------------------
                # Load media
                #----------------------------------------------------------------------------------
                SET type (MID (SLICE_IN value '"mimeType":"' '"') 6 3)
                IF  (NOT_EQUAL type "mp4")
                AND (NOT_EQUAL type "web")
                    CONTINUE
                FI
                SET quality (SLICE_IN value '"qualityLabel":"' 'p')
                IF (EQUAL (INDEX_OF quality (REGEXP "144|240|360|480|720|1080|1440|2160")) -1)
                    CONTINUE
                FI
                #----------------------------------------------------------------------------------
                # Extract url
                #----------------------------------------------------------------------------------
                SET source (SLICE_IN value '"url":"' '"')
                HASH_SET medias quality source
                #----------------------------------------------------------------------------------
            END
        FI
        #------------------------------------------------------------------------------------------
        # Load "hlsManifestUrl" for a live stream
        #------------------------------------------------------------------------------------------
        SET source (SLICE_IN data '"hlsManifestUrl":"' '"')
        IF (LENGTH source)
            HASH_SET next "backend" "youtube"
            HASH_SET next "url" source
            HASH_SET next "id" 1
            RETURN
        FI
        #------------------------------------------------------------------------------------------
        # Load "adaptiveFormats"
        #------------------------------------------------------------------------------------------
        # NOTE: When the source mode is 'SourceSafe' we skip the adaptative sources.
        IF (NOT_EQUAL mode "safe")
            SET sources (SLICE_IN data '"adaptiveFormats"' ']')
            SET list (SPLIT sources "approxDurationMs")
            FOREACH list value
                IF (CONTAIN value "ec-3")
                    IF (EQUAL (CONTAIN value "AUDIO_QUALITY_ULTRALOW") false)
                        #--------------------------------------------------------------------------
                        # Extract url
                        #--------------------------------------------------------------------------
                        SET audio (SLICE_IN value '"url":"' '"')
                        #--------------------------------------------------------------------------
                    FI
                    LIST_REMOVE_AT list i
                    CONTINUE
                FI
                SET i (ADD i 1)
            END
            IF (EQUAL (LENGTH audio) 0)
                SET i 0
                FOREACH list value
                    IF (CONTAIN value "opus")
                        IF (EQUAL (CONTAIN value "AUDIO_QUALITY_ULTRALOW") false)
                            #----------------------------------------------------------------------
                            # Extract url
                            #----------------------------------------------------------------------
                            SET audio (SLICE_IN value '"url":"' '"')
                            #----------------------------------------------------------------------
                        FI
                        LIST_REMOVE_AT list i
                        CONTINUE
                    FI
                    SET i (ADD i 1)
                END
            ELIF (EQUAL (LENGTH audio) 0)
                SET i 0
                FOREACH list value
                    IF (CONTAIN value "mp4a")
                        IF (EQUAL (CONTAIN value "AUDIO_QUALITY_ULTRALOW") false)
                            #----------------------------------------------------------------------
                            # Extract url
                            #----------------------------------------------------------------------
                            SET audio (SLICE_IN value '"url":"' '"')
                            #----------------------------------------------------------------------
                        FI
                        LIST_REMOVE_AT list i
                        CONTINUE
                    FI
                    SET i (ADD i 1)
                END
            FI
            # NOTE: When the source mode is 'SourceAudio' we skip the video sources.
            IF (EQUAL mode "audio")
                IF (LENGTH audio)
                    HASH_SET medias "default" audio
                FI
            ELSE
                FOREACH list value
                    #------------------------------------------------------------------------------
                    # Load adaptative
                    #------------------------------------------------------------------------------
                    SET type (MID (SLICE_IN value '"mimeType":"' '"') 6 3)
                    IF (NOT_EQUAL type "mp4")
                        CONTINUE
                    FI
                    SET quality (SLICE_IN value '"qualityLabel":"' 'p')
                    IF (EQUAL (INDEX_OF quality (REGEXP "144|240|360|480|720|1080|1440|2160")) -1)
                        CONTINUE
                    FI
                    #------------------------------------------------------------------------------
                    # Extract url
                    #------------------------------------------------------------------------------
                    SET source (SLICE_IN value '"url":"' '"')
                    # NOTE: We skip the source when it has an invalid duration.
                    IF (CONTAIN source "&dur=0")
                        CONTINUE
                    FI
                    HASH_SET medias quality source
                    HASH_SET audios quality audio
                    #------------------------------------------------------------------------------
                END
            FI
        FI
        # FIXME: Sometimes the request randomly fails.
        IF (EQUAL (COUNT medias) 0)
        AND (CONTAIN data "\"status\":\"ERROR\"")
            SET reload true
        FI
    FI
    SET expiry (ADD (DATE) 60) # Two hours

EXTRACT_TRACK: |
    SET data (READ data "utf-8")
    IF (CONTAIN data "\"hlsManifestUrl\":\"")
        SET type "live"
    ELSE
        SET type "track"
    FI
    SET index (INDEX_OF data "=\"og:image")
    SET cover (HTML_ATTRIBUTE data "content" index)
    #SET cover (REPLACE cover "https://" "http://")
    SET json (SLICE data "\"videoDetails\"" "\"playerConfig\"")
    SET title (JSON_EXTRACT_UTF8 json "title")
    SET author (JSON_EXTRACT_UTF8 json "author")
    SET feed (JSON_EXTRACT json "channelId")
    SET feed (APPEND "https://www.youtube.com/channel/" (URL_PATH feed))
    SET duration (JSON_EXTRACT json "lengthSeconds")
    SET duration (MULTIPLY duration 1000)
    SET index (INDEX_OF data "\"uploadDate\":" index)
    SET date (MID (JSON_EXTRACT data "uploadDate" index) 0 19)
    SET date (DATE date "yyyy-MM-ddThh:mm:ss")

EXTRACT_PLAYLIST: |
    SET data (READ data "utf-8")
    IF (EQUAL id 1) # Feed
        IF (EQUAL queryData "")
            SET cover (HTML_ATTRIBUTE data "href" (INDEX_OF data "\"image_src\""))
            SET title (HTML_ATTRIBUTE_UTF8 data "content" (INDEX_OF data "\"og:title\""))
            SET index (INDEX_OF "data-uix-load-more-href=\"")
            IF (EQUAL index -1)
                SET url (HTML_ATTRIBUTE data "data-uix-load-more-href" index)
                SET url (APPEND "https://www.youtube.com" (URL_DECODE url))
                SET id 1
                SET queryData 1
            FI
        ELSE
            SET data (HTML_TO_UTF8 (JSON_EXTRACT_HTML data "content_html"))
        FI
        # NOTE: It can either be 'gridVideoRenderer' or 'videoRenderer'.
        SET list (SLICES data "ideoRenderer\"" "}}}")
        FOREACH list value
            SET id (JSON_EXTRACT value "videoId")
            HASH_SET track "state" "default"
            HASH_SET track "source" (APPEND "https://www.youtube.com/watch?v=" id)
            HASH_SET track "title" (JSON_EXTRACT_UTF8 value "text")
            HASH_SET track "cover" (APPEND "https://i.ytimg.com/vi/" id "/maxresdefault.jpg")
            LIST_APPEND tracks track
        END
    ELIF (EQUAL id 2) # Search tracks
        SET list (SLICES data "\"videoRenderer\"" "}}}")
        FOREACH list value
            SET id (JSON_EXTRACT value "videoId")
            HASH_SET track "state" "default"
            HASH_SET track "source" (APPEND "https://www.youtube.com/watch?v=" id)
            HASH_SET track "title" (JSON_EXTRACT_UTF8 value "text")
            HASH_SET track "cover" (APPEND "https://i.ytimg.com/vi/" id "/maxresdefault.jpg")
            LIST_APPEND tracks track
        END
        IF (EQUAL queryData "")
            SET index (INDEX_OF data "class=\"branded-page-box search-pager")
            IF (EQUAL index -1)
                RETURN
            FI
            HASH_SET next "url" (APPEND "https://www.youtube.com" \
                                        (HTML_ATTRIBUTE data "href" index))
            HASH_SET next "id" 2
            HASH_SET next "queryData" 1
        FI
    ELIF (EQUAL id 3) # Related tracks
        IF (EQUAL queryData "")
            SET index (INDEX_OF data "\\\"continuation\\\"")
            SET json (SLICE_IN data "\\\"continuation\\\":\\\"" "\\\"" (ADD index 1))
            IF (NOT_EQUAL json "")
                HASH_SET next "url" (APPEND \
                                     "https://www.youtube.com/related_ajax?continuation=" \
                                     (URL_DECODE json))
                HASH_SET next "id" 3
                HASH_SET next "queryData" 1
            FI
        ELSE
            SET index (INDEX_OF data "\"body\"")
            SET data (HTML_TO_UTF8 (JSON_EXTRACT_HTML data "watch-more-related" index))
        FI
        SET list (SLICES data "\"compactVideoRenderer\"" "}}}")
        FOREACH list value
            SET id (JSON_EXTRACT value "videoId")
            HASH_SET track "state" "default"
            HASH_SET track "source" (APPEND "https://www.youtube.com/watch?v=" id)
            HASH_SET track "title" (JSON_EXTRACT_UTF8 value "simpleText")
            HASH_SET track "cover" (APPEND "https://i.ytimg.com/vi/" id "/maxresdefault.jpg")
            LIST_APPEND tracks track
        END
    ELSE # Playlist
        IF (EQUAL queryData "")
            SET index (INDEX_OF data "<meta name=\"title")
            SET title (HTML_ATTRIBUTE_UTF8 data "content" index)
            IF (EQUAL index -1)
                SET data (HTML_ATTRIBUTE data "data-uix-load-more-href" index)
                HASH_SET next "url" (APPEND "https://www.youtube.com" (URL_DECODE data))
                HASH_SET next "queryData" 1
            FI
        ELSE
            SET data (HTML_TO_UTF8 (JSON_EXTRACT_HTML data "content_html"))
        FI
        SET list (SLICES data "\"playlistVideoRenderer\"" "}}}")
        FOREACH list value
            SET id (JSON_EXTRACT value "videoId")
            HASH_SET track "state" "default"
            HASH_SET track "source" (APPEND "https://www.youtube.com/watch?v=" id)
            HASH_SET track "title" (JSON_EXTRACT_UTF8 value "text")
            HASH_SET track "cover" (APPEND "https://i.ytimg.com/vi/" id "/maxresdefault.jpg")
            LIST_APPEND tracks track
        END
    FI

EXTRACT_FOLDER: |
    SET data (READ data "utf-8")
    IF (EQUAL id 1) # Search channels
        SET list (SLICES data "\"channelRenderer\"" "}}}")
        FOREACH list value
            SET id (JSON_EXTRACT value "url")
            SET cover (JSON_EXTRACT_UTF8 value "url" (INDEX_OF value "\"thumbnails\""))
            SET cover (MID cover 0 (INDEX_OF cover '='))
            HASH_SET item "type" "feed"
            HASH_SET item "state" "default"
            HASH_SET item "source" (APPEND "https://www.youtube.com" id)
            HASH_SET item "title" (JSON_EXTRACT_UTF8 value "simpleText")
            HASH_SET item "cover" (APPEND "https:" cover)
            LIST_APPEND items item
        END
    ELSE # Search playlists
        SET list (SLICES data "\"playlistRenderer\"" "}}}")
        FOREACH list value
            SET id (JSON_EXTRACT value "playlistId")
            SET cover (JSON_EXTRACT_UTF8 value "url" (INDEX_OF value "\"thumbnails\""))
            SET cover (MID cover 0 (INDEX_OF cover '?'))
            HASH_SET item "type" "playlist"
            HASH_SET item "state" "default"
            HASH_SET item "source" (APPEND "https://www.youtube.com/playlist?list=" id)
            HASH_SET item "title" (JSON_EXTRACT_UTF8 value "simpleText")
            HASH_SET item "cover" cover
            LIST_APPEND items item
        END
        IF (EQUAL queryData "")
            SET index (INDEX_OF data "class=\"branded-page-box search-pager")
            IF (EQUAL index -1)
                RETURN
            FI
            HASH_SET next "url" (APPEND "https://www.youtube.com" \
                                        (HTML_ATTRIBUTE data "href" index))
            HASH_SET next "id" id
            HASH_SET next "queryData" 1
        FI
    FI
