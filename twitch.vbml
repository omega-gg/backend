# VBML 1.0.3
#--------------------------------------------------------------------------------------------------
# Properties
#--------------------------------------------------------------------------------------------------

type: backend

source: https://raw.githubusercontent.com/omega-gg/backend/master/twitch.vbml

api: 1.0.3

version: 1.0.5

title: Twitch

host: twitch.tv

cover: cover/twitch.png

items:
    playlist:
        title: Channels
        label: tracks

validate: ^twitch.tv|^gql.twitch.tv

#--------------------------------------------------------------------------------------------------
# Routines
#--------------------------------------------------------------------------------------------------

TRACK_ID: |
    SET url (URL_REMOVE_PREFIX url)
    IF (EQUAL (START_WITH url "twitch.tv/") false)
    OR (CONTAIN url (REGEXP "/opensearch.xml|/downloads|/directory"))
        RETURN ""
    FI
    IF (CONTAIN url "/videos/")
        RETURN (URL_ELEMENTS url 2 10)
    FI
    IF (NOT_EQUAL (COUNT_STRING url '/') 1)
        RETURN ""
    FI
    RETURN (URL_ELEMENT url 10)

URL_TRACK: |
    RETURN (APPEND "https://www.twitch.tv/" id)

QUERY_TRACK: |
    SET url (URL_REMOVE_PREFIX url)
    IF (EQUAL (START_WITH url "twitch.tv/") false)
        RETURN false
    FI
    IF (CONTAIN url "/videos/")
        SET url (APPEND "https://www.twitch.tv/videos/" (URL_ELEMENT url 17))
        SET id 1
        # NOTE: We need to wait 1 second before reloading the page.
        SET delay 1000
        RETURN true
    FI
    IF (NOT_EQUAL (COUNT_STRING url '/') 1)
        RETURN false
    FI
    SET stream (URL_ELEMENT url 10)
    SET url (APPEND "https://www.twitch.tv/" stream)
    SET queryData stream
    RETURN true

QUERY_SOURCE: |
    SET url (URL_REMOVE_PREFIX url)
    IF (EQUAL (START_WITH url "twitch.tv/") false)
        RETURN false
    FI
    IF (CONTAIN url "/videos/")
        SET video (URL_ELEMENT url 17)
        SET url "https://gql.twitch.tv/gql"
        SET id 1
        SET header (APPEND '"Content-Type" "application/json"' \
                           '"Client-Id" "kimne78kx3ncx6brgo4mv6wki5h1ko"')
        SET body (APPEND '{ "query": "{ videoPlaybackAccessToken(' \
                         'id: \\"' video '\\", '                   \
                         'params: { platform: \\"web\\", '         \
                         'playerBackend: \\"mediaplayer\\", '      \
                         'playerType: \\"site\\"}) '               \
                         '{ value signature }}" }')
        SET queryData video
        RETURN true
    FI
    IF (NOT_EQUAL (COUNT_STRING url '/') 1)
        RETURN false
    FI
    SET stream (URL_ELEMENT url 10)
    SET url "https://gql.twitch.tv/gql"
    SET header (APPEND '"Content-Type" "application/json"' \
                       '"Client-Id" "kimne78kx3ncx6brgo4mv6wki5h1ko"')
    SET body (APPEND '{ "query": "{ streamPlaybackAccessToken(' \
                     'channelName: \\"' stream '\\", '          \
                     'params: { platform: \\"web\\", '          \
                     'playerBackend: \\"mediaplayer\\", '       \
                     'playerType: \\"site\\"}) '                \
                     '{ value signature }}" }')
    # NOTE: This needs to be lowercase for the POST to succeed.
    SET queryData (LOWER stream)
    RETURN true

CREATE_QUERY: |
    IF (EQUAL method "search")
        IF (EQUAL label "tracks")
            SET url "https://gql.twitch.tv/gql"
            SET header (APPEND '"Content-Type" "application/json"' \
                               '"Client-Id" "kimne78kx3ncx6brgo4mv6wki5h1ko"')
            SET body (APPEND '{ "query": "query SearchContent_ChannelRefetchQuery($userQuery: ' \
                             'String! $platform: String! $noQuery: Boolean! $target: ' \
                             'SearchForTarget) { searchFor(userQuery: $userQuery, platform: ' \
                             '$platform, target: $target)' \
                             '@skip(if: $noQuery) { channels { cursor items { id __typename ' \
                             '...SearchChannelCard_channel }}}}' \
                             'fragment SearchChannelCard_channel on User { id __typename login ' \
                             '...SearchOfflineChannel_channel stream { id __typename ' \
                             '...SearchStreamCard_stream } roles { isPartner }}' \
                             'fragment SearchOfflineChannel_channel on User { displayName ' \
                             'followers { totalCount } lastBroadcast { startedAt id __typename } ' \
                             'login profileImageURL(width: 600) } ' \
                             'fragment SearchStreamCard_stream on Stream { broadcaster ' \
                             '{ displayName login broadcastSettings { title id __typename } id ' \
                             '__typename } game { displayName name id __typename } id ' \
                             '__typename previewImageURL viewersCount }", ' \
                             '"variables": { "userQuery": "' q '", "platform": "mobile_web", ' \
                             '"noQuery": false, "target": { "index": "CHANNEL", "limit": 30 }}}')
        FI
    FI

EXTRACT_SOURCE: |
    SET data (READ data "utf-8")
    IF (EQUAL id 2)
        IF (EQUAL mode "audio")
            SET index (INDEX_OF data "VIDEO=\"audio_only\"")
            SET source (MID data (INDEX_OF data 'https' index))
            HASH_SET medias "default" source
        ELSE
            SET list (SLICES data "EXT-X-STREAM-INF" "m3u8")
            FOREACH list value
                SET quality (SLICE_IN value 'x' ',')
                # NOTE: We consider 160p to be 240p.
                IF (EQUAL quality "160")
                    SET quality "240"
                FI
                SET source (MID value (INDEX_OF value 'https'))
                HASH_SET medias quality source
            END
        FI
    ELSE
        SET value (URL_ENCODE (JSON_EXTRACT_UTF8 data "value"))
        SET signature (URL_ENCODE (JSON_EXTRACT_UTF8 data "signature"))
        IF (EQUAL id 0)
            SET url (APPEND "https://usher.ttvnw.net/api/channel/hls/" queryData ".m3u8?" \
                             "token=" value "&sig=" signature)
        ELSE
            SET url (APPEND "https://usher.ttvnw.net/vod/" queryData ".m3u8?" \
                            "nauth=" value "&nauthsig=" signature )
        FI
        IF (EQUAL mode "audio")
            SET url (APPEND url "&allow_audio_only=true")
        ELSE
            SET url (APPEND url "&allow_source=true")
        FI
        HASH_SET next "url" url
        HASH_SET next "id" 2
        RETURN
    FI

EXTRACT_TRACK: |
    SET data (READ data "utf-8")
    #IF (EQUAL (CONTAIN data "content=\"video.other\"") false)
    #    RETURN
    #FI
    IF (EQUAL id 1)
        #------------------------------------------------------------------------------------------
        # NOTE: 'og:title' or 'og:image' tend to be after 'content'.
        SET index (LAST_INDEX_OF data '<' (INDEX_OF data "property=\"og:title\""))
        SET title (HTML_ATTRIBUTE_UTF8 data "content" index)
        # NOTE: Sometimes Twitch returns an empty page so we reload it one second later
        #       (delay in QUERY_TRACK).
        IF (EQUAL title "")
            SET reload true
            RETURN
        FI
        SET index (LAST_INDEX_OF data '<' (INDEX_OF data "property=\"og:image\""))
        SET cover (HTML_ATTRIBUTE data "content" index)
        #------------------------------------------------------------------------------------------
        # NOTE: We make sure we have a valid cover before fixing it.
        IF (START_WITH url "https://static-cdn")
            SET index (LAST_INDEX_OF cover '-')
            SET cover (MID cover 0 (ADD index 1))
            SET cover (APPEND cover "1920x1080.jpg")
        FI
    ELSE
        SET index (INDEX_OF data "\"VideoObject\"")
        # NOTE: This means the stream is not live.
        IF (EQUAL index -1)
            SET type "media"
            #--------------------------------------------------------------------------------------
            # NOTE: 'og:title' or 'og:image' tend to be after 'content'.
            SET index (LAST_INDEX_OF data '<' (INDEX_OF data "property=\"og:title\""))
            SET title (HTML_TO_UTF8 (SLICE_IN data "content=\"" " -" index))
            SET index (LAST_INDEX_OF data '<' (INDEX_OF data "property=\"og:image\""))
            SET cover (HTML_ATTRIBUTE data "content" index)
            #--------------------------------------------------------------------------------------
            RETURN
        FI
        SET type "live"
        SET name (HTML_TO_UTF8 (SLICE_IN data "\"name\":\"" " -"))
        SET description (HTML_TO_UTF8 (SLICE_IN data "\"description\":\"" '"' index))
        SET title (APPEND name " - " description)
        SET cover (APPEND "https://static-cdn.jtvnw.net/previews-ttv/live_user_" queryData \
                          "-1920x1080.jpg")
        SET author name
    FI

EXTRACT_PLAYLIST: |
    SET data (READ data "utf-8")
    SET data (JSON_EXTRACT data "items")
    FOREACH (JSON_SPLIT data) data
        SET source (APPEND "https://www.twitch.tv/" (JSON_EXTRACT data "login"))
        HASH_SET track "source" source
        HASH_SET track "title" (JSON_EXTRACT_UTF8 data "displayName")
        HASH_SET track "cover" (JSON_EXTRACT data "profileImageURL")
        LIST_APPEND tracks track
    END
